#
# Nordic nRF52 series: ARM Cortex-M4 @ 64 MHz
#
# (c) 2016, LEAPS - All rights reserved.
#

#source [find interface/cmsis-dap.cfg]
source [find interface/jlink.cfg]
transport select swd
source [find target/swj-dp.tcl]


if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME nrf52
}

if { [info exists CPUTAPID] } {
	set _CPUTAPID $CPUTAPID
} else {
	set _CPUTAPID 0x2ba01477
}

# Work-area is a space in RAM used for flash programming
# By default use 16kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x4000
}

swj_newdap $_CHIPNAME cpu -expected-id $_CPUTAPID

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -chain-position $_TARGETNAME

$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0

flash bank $_CHIPNAME.flash nrf51 0x00000000 0 1 1 $_TARGETNAME
flash bank $_CHIPNAME.uicr nrf51 0x10001000 0 1 1 $_TARGETNAME

adapter_khz 10000

if { ![using_hla] } {
	cortex_m reset_config sysresetreq
}

proc read_register {register} {
	set result ""
	mem2array result 32 $register 1
	return $result(0)
}

proc led_blink {} {
	# LED=22, GREEN=30, ORANGE=31
	# set PIN_CNF[0] DIR=Output, INPUT=Disconnect, PULL=Nopull, DRIVE=S0S1, SENSE=Disabled
	mww 0x50000758 0x1
	mww 0x50000778 0x1
	mww 0x5000077C 0x1
	# OUTCLR
	mww 0x5000050C 0xc0400000
	sleep 250
	# OUTSET
	mww 0x50000508 0xc0400000
	sleep 250
	# OUTCLR
	mww 0x5000050C 0xc0400000
	sleep 250
	# OUTSET
	mww 0x50000508 0xc0400000
}

proc eraseall {} {
	mww 0x4001E504 0x00000002
	while { [expr [read_register 0x4001E400] & 0x00000001 ] != 0x00000001 } { sleep 1 }
	mww 0x4001E50C 0x00000001
	while { [expr [read_register 0x4001E400] & 0x00000001 ] != 0x00000001 } { sleep 1 }
	mww 0x4001E504 0x00000000
}

proc wdt_feed {} {
	mww 0x40010600 0x6E524635
	mww 0x40010604 0x6E524635
	mww 0x40010608 0x6E524635
	mww 0x4001060C 0x6E524635
	mww 0x40010610 0x6E524635
	mww 0x40010614 0x6E524635
	mww 0x40010618 0x6E524635
	mww 0x4001061C 0x6E524635
	mww 0x40010620 0x6E524635
}

proc set_boot_addr_fw2 {} {
	mww 0x4001E504 0x00000001
	while { [expr [read_register 0x4001E400] & 0x00000001 ] != 0x00000001 } { sleep 1 }
	mww 0x4001E514 0x00000001
	while { [expr [read_register 0x4001E400] & 0x00000001 ] != 0x00000001 } { sleep 1 }
	mww 0x4001E504 0x00000001
	while { [expr [read_register 0x4001E400] & 0x00000001 ] != 0x00000001 } { sleep 1 }
	mww 0x10001080 0x00000001
	while { [expr [read_register 0x4001E400] & 0x00000001 ] != 0x00000001 } { sleep 1 }
	mww 0x10001084 0x00000002
	while { [expr [read_register 0x4001E400] & 0x00000001 ] != 0x00000001 } { sleep 1 }
	mww 0x10001088 0xa5b6c7d8
	while { [expr [read_register 0x4001E400] & 0x00000001 ] != 0x00000001 } { sleep 1 }
	mww 0x1000108C 0xa5b6c7d8
	while { [expr [read_register 0x4001E400] & 0x00000001 ] != 0x00000001 } { sleep 1 }
	mww 0x4001E504 0x00000001
	while { [expr [read_register 0x4001E400] & 0x00000001 ] != 0x00000001 } { sleep 1 }
}
